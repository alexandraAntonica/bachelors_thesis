import os
import shutil
import subprocess
from pathlib import Path


NCBI_DATA_DIR = Path("/Users/alexandra/Desktop/thesis_programming/data/ncbi_genomes/ncbi_Ecoli/data")
RAW_GENOMES_DIR = Path("/Users/alexandra/Desktop/thesis_programming/data/ncbi_genomes/ncbi_Ecoli/raw_genomes")
PROKKA_OUTPUT_DIR = Path("/Users/alexandra/Desktop/thesis_programming/data/prokka_annotations_Ecoli")
PANAROO_INPUT_DIR = Path("/Users/alexandra/Desktop/thesis_programming/data/panaroo_input_Ecoli")

PANAROO_OUTPUT_DIR = Path("/Users/alexandra/Desktop/thesis_programming/data/panaroo_output_Ecoli")
PANAROO_OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

NUM_CPUS = "8"

# organize files
def collect_fna_files():
    """
    This function re-organizes the genome files (.fna files) that were downloaded from NCBI. This step 
    is necessary because Prokka requires all the genome files to be in a single directory.
    """
    RAW_GENOMES_DIR.mkdir(parents=True, exist_ok=True)
    for subdir in NCBI_DATA_DIR.iterdir():
        if subdir.is_dir():
            for file in subdir.glob("*.fna"):
                clean_name = subdir.name.replace(".", "") + ".fna"
                target_path = RAW_GENOMES_DIR / clean_name
                shutil.copy(file, target_path)
                print(f"Copied {file.name} -> {target_path.name}")

# Prokka annotation
def run_prokka():
    """
    This function runs Prokka on all the genome files. It uses Docker to run
    Prokka in a containerized environment to avoid compatibility and dependencies issues.
    Prokka annotated the genomes to ensure consistency in the data format and prevent errors in 
    susbequent analysis with Panaroo.
    """
    PROKKA_IMAGE = "staphb/prokka"
    PROKKA_OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
    for fna in RAW_GENOMES_DIR.glob("*.fna"):
        genome_id = fna.stem
        out_dir = PROKKA_OUTPUT_DIR / genome_id
        out_dir.mkdir(exist_ok=True)

        cmd = [
            "docker", "run", "--rm", "-it",
            "-v", f"{RAW_GENOMES_DIR}:/input",
            "-v", f"{PROKKA_OUTPUT_DIR}:/output",
            PROKKA_IMAGE,
            "prokka", f"/input/{fna.name}",
            "--outdir", f"/output/{genome_id}",
            "--prefix", genome_id,
            "--kingdom", "Bacteria",
            "--cpus", NUM_CPUS,
            "--force"

        ]

        print(f"\n[Prokka] Annotating {genome_id}...")
        subprocess.run(cmd, check=True)

# organize files
def prepare_panaroo_input():
    """"
    This function collects all the .gff files generated by Prokka and organizes them into a
    single directory for Panaroo. This step is necessary because Panaroo requires all the input
    files to be in a single directory.
    """
    PANAROO_INPUT_DIR.mkdir(parents=True, exist_ok=True)
    for gff_file in PROKKA_OUTPUT_DIR.glob("**/*.gff"):
        target_path = PANAROO_INPUT_DIR / gff_file.name
        shutil.copy(gff_file, target_path)
        print(f"Collected {gff_file.name} for Panaroo")

# Panaroo
def run_panaroo():
    """
    This function runs Panaroo on the .gff files. It uses Docker to run
    Panaroo in a containerized environment to avoid compatibility and dependencies issues.
    Panaroo will generate a pangenome analysis and save the output to the specified directory.
    """
    print("\n[Panaroo] Running pangenome analysis with Docker...")

    PANAROO_IMAGE = "quay.io/biocontainers/panaroo:1.3.0--pyhdfd78af_0"
    

    cmd = [
        "docker", "run", "--rm", "-it",
        "-v", f"{PANAROO_INPUT_DIR}:/input",
        "-v", f"{PANAROO_OUTPUT_DIR}:/output",
        PANAROO_IMAGE,
        "bash", "-c",
        f"panaroo -i $(find /input -name '*.gff' | tr '\n' ' ') "
        f"-o /output -t {NUM_CPUS} --clean-mode strict --merge_paralogs"

    ]

    subprocess.run(cmd, check=True)

def get_core_alignment():
    """
    Run panaroo-msa using Docker. This function generates a core alignment of the pangenome
    using the core genome alignment method. It uses the output directory from the previous
    Panaroo run as input.
    """

    cmd = [
        "docker", "run", "--rm", "-it",
        "-v", f"{PANAROO_OUTPUT_DIR}:/data",
        "quay.io/biocontainers/panaroo:1.3.0--pyhdfd78af_0",
        "bash", "-c",
        f"panaroo-msa -o /data --aligner mafft --alignment core"
    ]

    print(f"[Panaroo-MSA] Running panaroo-msa on {PANAROO_OUTPUT_DIR}...")
    subprocess.run(cmd, check=True)

if __name__ == "__main__":
    #collect_fna_files()
    #run_prokka()
    #prepare_panaroo_input()
    #run_panaroo()
    get_core_alignment()
    print("\n Pipeline complete!")